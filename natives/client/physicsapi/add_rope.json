{
  "title": "ADD_ROPE",
  "breadcrumbs": [
    "Native Reference",
    "PHYSICSAPI",
    "ADD_ROPE"
  ],
  "content": "0xE832D760399EB2200xA592EC74// AddRope\nint ADD_ROPE(float x, float y, float z, float rotX, float rotY, float rotZ, float maxLength, int ropeType, float initLength, float minLength, float lengthChangeRate, BOOL onlyPPU, BOOL collisionOn, BOOL lockFromFront, float timeMultiplier, BOOL breakable, Any* unkPtr);Parameters:x: Spawn coordinate X component.y: Spawn coordinate Y component.z: Spawn coordinate Z component.rotX: Rotation X component.rotY: Rotation Y component.rotZ: Rotation Z component.maxLength: The maximum length the rope can droop.ropeType: The zero-based index of the entry in the ropedata.xml file. NOTE: Using an index which does not exist will crash the game. As of game build 3258, valid values are from 0 to 7 inclusive.initLength: The initial length of the rope.minLength: The minimum length the rope can be.lengthChangeRate: The speed in which the rope will wind if winding is started.onlyPPU: collisionOn: Whether the rope should have collision. In original scripts this is followed by a LoadRopeData call when set.lockFromFront: If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).timeMultiplier: The speed as which physics should run at. 1.0f is normal, 2.0f is twice as fast, -1.0f is time going backwards. This can affect gravity, etc.breakable: Whether shooting the rope will break it.unkPtr: Unknown pointer, always 0 in original scrips.Returns: A script handle for the ropeCreates a rope at the specific position, that extends in the specified direction when not attached to any entities.\n__\nRope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).\nRope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.\nThere are 8 different rope types in the base game. Full rope data can be found in ropedata.xml.enum ePhysicsRopeType {\n    RopeThin = 0, // Verticies: 1, Radius: 0.03, Textures: rope & rope_n\n    RopeWire6 = 1, // Verticies: 4, Radius: 0.015, Textures: steel_cable & steel_cable_n\n    RopeWire32 = 2, // Verticies: 32, Radius: 0.025, Textures: steel_cable & steel_cable_n\n    RopeMesh = 3, // Verticies: 6, Radius: 0.03, Textures: rope & rope_n\n    RopeThinWire32 = 4, // Verticies: 32, Radius: 0.01, Textures: rope & rope_n\n    RopeReins = 5, // Verticies: 32, Radius: 0.005, Textures: rope & rope_n\n    RopeThin4 = 6, // Verticies: 4, Radius: 0.03, Textures: rope & rope_n\n    RopeWire64 = 7 // Verticies: 64, Radius: 0.025, Textures: steel_cable & steel_cable_n\n}\nExamples:LuaC#local function cleanup_rope_textures()\n\t-- we only want to cleanup if there are no other ropes still left on the map\n\t-- otherwise we'll make them go invisible.\n\tif #GetAllRopes() == 0 then\n\t\t-- there are no ropes on the map, we're safe to unload the textures.\n\t\tRopeUnloadTextures()\n\tend\nend\n\nCreateThread(function()\n\t-- if textures aren't loaded then we need to load them\n\tif not RopeAreTexturesLoaded() then\n\t\t-- load the textures so we can see the rope\n\t\tRopeLoadTextures()\n\t\twhile not RopeAreTexturesLoaded() do\n\t\t\tWait(0)\n\t\tend\n\tend\n\n\t-- Create a rope and store the handle\n\tlocal rope = AddRope(-2096.096, -311.906, 14.51, 0.0, 0.0, 0.0, 10.0, 1, 10.0, 0.0, 1.0, false, false, false, 1.0, false, 0)\n\t-- Check if the rope exists.\n\tif not DoesRopeExist(rope) then\n\t\tcleanup_rope_textures()\n\t\t-- If the rope does not exist, end the execution of the code here.\n\t\treturn\n\tend\n\t-- Let the rope exist for 3 seconds\n\tWait(3000)\n\t-- Delete the rope!\n\tDeleteRope(rope)\n\tcleanup_rope_textures()\nend)",
  "codeBlocks": [
    "// AddRope\nint ADD_ROPE(float x, float y, float z, float rotX, float rotY, float rotZ, float maxLength, int ropeType, float initLength, float minLength, float lengthChangeRate, BOOL onlyPPU, BOOL collisionOn, BOOL lockFromFront, float timeMultiplier, BOOL breakable, Any* unkPtr);",
    "Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.\n__\nRope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).\nRope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.",
    "enum ePhysicsRopeType {\n    RopeThin = 0, // Verticies: 1, Radius: 0.03, Textures: rope & rope_n\n    RopeWire6 = 1, // Verticies: 4, Radius: 0.015, Textures: steel_cable & steel_cable_n\n    RopeWire32 = 2, // Verticies: 32, Radius: 0.025, Textures: steel_cable & steel_cable_n\n    RopeMesh = 3, // Verticies: 6, Radius: 0.03, Textures: rope & rope_n\n    RopeThinWire32 = 4, // Verticies: 32, Radius: 0.01, Textures: rope & rope_n\n    RopeReins = 5, // Verticies: 32, Radius: 0.005, Textures: rope & rope_n\n    RopeThin4 = 6, // Verticies: 4, Radius: 0.03, Textures: rope & rope_n\n    RopeWire64 = 7 // Verticies: 64, Radius: 0.025, Textures: steel_cable & steel_cable_n\n}",
    "local function cleanup_rope_textures()\n\t-- we only want to cleanup if there are no other ropes still left on the map\n\t-- otherwise we'll make them go invisible.\n\tif #GetAllRopes() == 0 then\n\t\t-- there are no ropes on the map, we're safe to unload the textures.\n\t\tRopeUnloadTextures()\n\tend\nend\n\nCreateThread(function()\n\t-- if textures aren't loaded then we need to load them\n\tif not RopeAreTexturesLoaded() then\n\t\t-- load the textures so we can see the rope\n\t\tRopeLoadTextures()\n\t\twhile not RopeAreTexturesLoaded() do\n\t\t\tWait(0)\n\t\tend\n\tend\n\n\t-- Create a rope and store the handle\n\tlocal rope = AddRope(-2096.096, -311.906, 14.51, 0.0, 0.0, 0.0, 10.0, 1, 10.0, 0.0, 1.0, false, false, false, 1.0, false, 0)\n\t-- Check if the rope exists.\n\tif not DoesRopeExist(rope) then\n\t\tcleanup_rope_textures()\n\t\t-- If the rope does not exist, end the execution of the code here.\n\t\treturn\n\tend\n\t-- Let the rope exist for 3 seconds\n\tWait(3000)\n\t-- Delete the rope!\n\tDeleteRope(rope)\n\tcleanup_rope_textures()\nend)"
  ],
  "urls": [
    "https://docs.fivem.net/docs/",
    "https://docs.fivem.net/natives/",
    "https://github.com/citizenfx/natives/edit/master/PHYSICS/AddRope.md",
    "https://www.rockstargames.com/privacy",
    "https://www.rockstargames.com/cookies"
  ],
  "tags": [
    "client"
  ]
}