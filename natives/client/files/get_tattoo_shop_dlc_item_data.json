{
  "title": "GET_TATTOO_SHOP_DLC_ITEM_DATA",
  "breadcrumbs": [
    "Native Reference",
    "FILESAPI",
    "GET_TATTOO_SHOP_DLC_ITEM_DATA"
  ],
  "content": "0xFF56381874F820860x2E9D628C// GetTattooShopDlcItemData\nBOOL GET_TATTOO_SHOP_DLC_ITEM_DATA(int characterType, int decorationIndex, Any* outComponent);Parameters:characterType: Which character to get the tattoo data for (Refer to eTattooFaction above).decorationIndex: Tattoo index, value between 0 and GET_NUM_TATTOO_SHOP_DLC_ITEMS.outComponent: The referenced struct.Returns: A bool indicating that the tattoo data exists in the files.Returns data that adheres to the tattoo shop item data that is used in shop_tattoo.metaCharacter types:enum eTattooFaction\n{\n\tTATTOO_SP_MICHAEL = 0,\n\tTATTOO_SP_FRANKLIN = 1,\n\tTATTOO_SP_TREVOR = 2,\n\tTATTOO_MP_FM = 3,\n\tTATTOO_MP_FM_F = 4\n}\nReturned struct properties:struct sTattooShopItemValues\n{\n\t// Lock hash, used with IS_CONTENT_ITEM_LOCKED\n\tint LockHash;\n\t// Unique ID of this slot. It can also be 0.\n\tint Index;\n\t// Collection hash of this tattoo\n\tint CollectionHash;\n\t// Preset hash of this tattoo\n\tint PresetHash;\n\t// Cost of this tattoo in shops.\n\tint Cost;\n\t// Secondary placement of this tattoo.\n\tint eFacing;\n\t// Location of this tattoo on the body (for example, for torso there would be chest upper, stomach, etc)\n\tint UpdateGroup;\n\t// This tattoo's name in the form of a text label.\n\tconst char* NameTextLabel;\n};\nOld name:  _GET_TATTOO_COLLECTION_DATAExamples:LuaJavaScriptlocal function TattooBlobToTable(blob)\n    local LockHash = string.unpack('<i4', blob, 1) & 0xFFFFFFFF -- uint (hash)\n    local Index = string.unpack('<i4', blob, 9) -- int\n    local Collection = string.unpack('<i4', blob, 17) & 0xFFFFFFFF -- uint (hash)\n    local Preset = string.unpack('<i4', blob, 25) & 0xFFFFFFFF -- uint (hash)\n    local Price = string.unpack('<i4', blob, 33) -- int\n    local eFacing = string.unpack('<i4', blob, 41) -- TattooZoneData\n    local UpdateGroup = string.unpack('<i4', blob, 49) -- uint (hash)\n    local TextLabel = string.unpack('z', blob, 57) -- uint\n\n    return {\n        LockHash = LockHash,\n        Index = Index,\n        Collection = Collection,\n        Preset = Preset,\n        Price = Price,\n        eFacing = eFacing,\n        UpdateGroup = UpdateGroup,\n        TextLabel = TextLabel\n    }\nend\n\nfunction GetTattooDlcItemDataTable(CharacterType, DecorationIndex)\n\tlocal blob = string.rep('\\0\\0\\0\\0\\0\\0\\0\\0', 7+16)\n\tif not Citizen.InvokeNative(0xFF56381874F82086, CharacterType, DecorationIndex, blob) then return nil end -- Data doesn't exist, return a nil\n\n\treturn TattooBlobToTable(blob) -- Return the data table\nend\n\nlocal numberOfTattoos = GetNumTattooShopDlcItems(3) -- get all tattoos for mpmale\nfor i = 0, numberOfTattoos - 1 do\n\tlocal tattooData = GetTattooDlcItemDataTable(3, i)\n\t-- Do stuff with your tattoo data\nend",
  "codeBlocks": [
    "// GetTattooShopDlcItemData\nBOOL GET_TATTOO_SHOP_DLC_ITEM_DATA(int characterType, int decorationIndex, Any* outComponent);",
    "enum eTattooFaction\n{\n\tTATTOO_SP_MICHAEL = 0,\n\tTATTOO_SP_FRANKLIN = 1,\n\tTATTOO_SP_TREVOR = 2,\n\tTATTOO_MP_FM = 3,\n\tTATTOO_MP_FM_F = 4\n}",
    "struct sTattooShopItemValues\n{\n\t// Lock hash, used with IS_CONTENT_ITEM_LOCKED\n\tint LockHash;\n\t// Unique ID of this slot. It can also be 0.\n\tint Index;\n\t// Collection hash of this tattoo\n\tint CollectionHash;\n\t// Preset hash of this tattoo\n\tint PresetHash;\n\t// Cost of this tattoo in shops.\n\tint Cost;\n\t// Secondary placement of this tattoo.\n\tint eFacing;\n\t// Location of this tattoo on the body (for example, for torso there would be chest upper, stomach, etc)\n\tint UpdateGroup;\n\t// This tattoo's name in the form of a text label.\n\tconst char* NameTextLabel;\n};",
    "local function TattooBlobToTable(blob)\n    local LockHash = string.unpack('<i4', blob, 1) & 0xFFFFFFFF -- uint (hash)\n    local Index = string.unpack('<i4', blob, 9) -- int\n    local Collection = string.unpack('<i4', blob, 17) & 0xFFFFFFFF -- uint (hash)\n    local Preset = string.unpack('<i4', blob, 25) & 0xFFFFFFFF -- uint (hash)\n    local Price = string.unpack('<i4', blob, 33) -- int\n    local eFacing = string.unpack('<i4', blob, 41) -- TattooZoneData\n    local UpdateGroup = string.unpack('<i4', blob, 49) -- uint (hash)\n    local TextLabel = string.unpack('z', blob, 57) -- uint\n\n    return {\n        LockHash = LockHash,\n        Index = Index,\n        Collection = Collection,\n        Preset = Preset,\n        Price = Price,\n        eFacing = eFacing,\n        UpdateGroup = UpdateGroup,\n        TextLabel = TextLabel\n    }\nend\n\nfunction GetTattooDlcItemDataTable(CharacterType, DecorationIndex)\n\tlocal blob = string.rep('\\0\\0\\0\\0\\0\\0\\0\\0', 7+16)\n\tif not Citizen.InvokeNative(0xFF56381874F82086, CharacterType, DecorationIndex, blob) then return nil end -- Data doesn't exist, return a nil\n\n\treturn TattooBlobToTable(blob) -- Return the data table\nend\n\nlocal numberOfTattoos = GetNumTattooShopDlcItems(3) -- get all tattoos for mpmale\nfor i = 0, numberOfTattoos - 1 do\n\tlocal tattooData = GetTattooDlcItemDataTable(3, i)\n\t-- Do stuff with your tattoo data\nend",
    "-- Example usage for GET_TATTOO_SHOP_DLC_ITEM_DATA\nGetTattooShopDlcItemData(1, 1, 0)"
  ],
  "urls": [
    "https://docs.fivem.net/docs/",
    "https://docs.fivem.net/natives/",
    "https://github.com/citizenfx/natives/edit/master/FILES/GetTattooShopDlcItemData.md",
    "https://docs.fivem.net/natives/?_0x278F76C3B0A8F109",
    "https://www.rockstargames.com/privacy",
    "https://www.rockstargames.com/cookies"
  ],
  "tags": [
    "client"
  ]
}