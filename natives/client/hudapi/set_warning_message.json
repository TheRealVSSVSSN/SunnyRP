{
  "title": "SET_WARNING_MESSAGE",
  "breadcrumbs": [
    "Native Reference",
    "HUDAPI",
    "SET_WARNING_MESSAGE"
  ],
  "content": "0x7B1776B3B53F8D740xBE699BDE// SetWarningMessage\nvoid SET_WARNING_MESSAGE(char* entryLine1, int instructionalKey, char* entryLine2, BOOL p3, int p4, char* background, char* p6, BOOL showBg, int errorCode);Parameters:entryLine1: The text label to display as the first line of the warning message.instructionalKey: This is an enum, check the description for a list.entryLine2: The text label to display as the second line of the warning message.p3: Purpose unknown.p4: Purpose unknown.background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.p6: Purpose unknown.showBg: Purpose unknown.errorCode: When not 0, adds a field displaying the value as 'error code' to the warning message.enum eInstructionalButtonTypes\n{\n    NONE = 0,\n    SELECT = 1,\n    OK = 2,\n    YES = 4,\n    BACK = 8,\n    BACK_SELECT = 9,\n    BACK_OK = 10,\n    BACK_YES = 12,\n    CANCEL = 16,\n    CANCEL_SELECT = 17,\n    CANCEL_OK = 18,\n    CANCEL_YES = 20,\n    NO = 32,\n    NO_SELECT = 33,\n    NO_OK = 34,\n    YES_NO = 36,\n    RETRY = 64,\n    RETRY_SELECT = 65,\n    RETRY_OK = 66,\n    RETRY_YES = 68,\n    RETRY_BACK = 72,\n    RETRY_BACK_SELECT = 73,\n    RETRY_BACK_OK = 74,\n    RETRY_BACK_YES = 76,\n    RETRY_CANCEL = 80,\n    RETRY_CANCEL_SELECT = 81,\n    RETRY_CANCEL_OK = 82,\n    RETRY_CANCEL_YES = 84,\n    SKIP = 256,\n    SKIP_SELECT = 257,\n    SKIP_OK = 258,\n    SKIP_YES = 260,\n    SKIP_BACK = 264,\n    SKIP_BACK_SELECT = 265,\n    SKIP_BACK_OK = 266,\n    SKIP_BACK_YES = 268,\n    SKIP_CANCEL = 272,\n    SKIP_CANCEL_SELECT = 273,\n    SKIP_CANCEL_OK = 274,\n    SKIP_CANCEL_YES = 276,\n    CONTINUE = 16384,\n    BACK_CONTINUE = 16392,\n    CANCEL_CONTINUE = 16400,\n    LOADING_SPINNER = 134217728,\n    SELECT_LOADING_SPINNER = 134217729,\n    OK_LOADING_SPINNER = 134217730,\n    YES_LOADING_SPINNER = 134217732,\n    BACK_LOADING_SPINNER = 134217736,\n    BACK_SELECT_LOADING_SPINNER = 134217737,\n    BACK_OK_LOADING_SPINNER = 134217738,\n    BACK_YES_LOADING_SPINNER = 134217740,\n    CANCEL_LOADING_SPINNER = 134217744,\n    CANCEL_SELECT_LOADING_SPINNER = 134217745,\n    CANCEL_OK_LOADING_SPINNER = 134217746,\n    CANCEL_YES_LOADING_SPINNER = 134217748\n}\nNote: this list is definitely NOT complete, but these are the ones I've been able to find before giving up because it's such a boring thing to look for 'good' combinations.Result of the example code:\nhttps://i.imgur.com/imwoimm.pngExamples:Lua-- Make the first line using custom text.\nAddTextEntry(\"warning_message_first_line\", \"This is the first line.\")\n\n-- Make the second line using custom text.\nAddTextEntry(\"warning_message_second_line\", \"This is the second line!\")\n\n-- Add an event handler for when the screen is dismissed.\nAddEventHandler(\"optionSelected\", function(selected)\n    print(selected) -- do whatever you want with the selected choice.\n    -- players can either press the physicial buttons, or they can click\n    -- the instructional buttons with their mouse and it will trigger\n    -- the event as well.\nend)\n\n\n-- Create a thread to loop this warning message.\nCreateThread(function()\n    while true do\n        Wait(0)\n        -- Display the warning message every tick.\n        SetWarningMessage(\"warning_message_first_line\", 82, \"warning_message_second_line\", 0, -1, true, 0, 0, 0)\n        \n        -- Check for key presses or instructional button clicks.\n        -- Input group of 2 is required for this to work while the warning is being displayed.\n        \n        if (IsControlJustReleased(2, 201) or IsControlJustReleased(2, 217)) then -- any select/confirm key was pressed.\n            TriggerEvent(\"optionSelected\", \"select\")\n            break\n        elseif (IsControlJustReleased(2, 203)) then -- spacebar/x on controller (alt option) was pressed.\n            TriggerEvent(\"optionSelected\", \"alt\")\n            break\n        elseif (IsControlJustReleased(2, 202)) then -- any of the cancel/back buttons was pressed\n            TriggerEvent(\"optionSelected\", \"cancel\")\n            break\n        end\n    end\nend)",
  "codeBlocks": [
    "// SetWarningMessage\nvoid SET_WARNING_MESSAGE(char* entryLine1, int instructionalKey, char* entryLine2, BOOL p3, int p4, char* background, char* p6, BOOL showBg, int errorCode);",
    "enum eInstructionalButtonTypes\n{\n    NONE = 0,\n    SELECT = 1,\n    OK = 2,\n    YES = 4,\n    BACK = 8,\n    BACK_SELECT = 9,\n    BACK_OK = 10,\n    BACK_YES = 12,\n    CANCEL = 16,\n    CANCEL_SELECT = 17,\n    CANCEL_OK = 18,\n    CANCEL_YES = 20,\n    NO = 32,\n    NO_SELECT = 33,\n    NO_OK = 34,\n    YES_NO = 36,\n    RETRY = 64,\n    RETRY_SELECT = 65,\n    RETRY_OK = 66,\n    RETRY_YES = 68,\n    RETRY_BACK = 72,\n    RETRY_BACK_SELECT = 73,\n    RETRY_BACK_OK = 74,\n    RETRY_BACK_YES = 76,\n    RETRY_CANCEL = 80,\n    RETRY_CANCEL_SELECT = 81,\n    RETRY_CANCEL_OK = 82,\n    RETRY_CANCEL_YES = 84,\n    SKIP = 256,\n    SKIP_SELECT = 257,\n    SKIP_OK = 258,\n    SKIP_YES = 260,\n    SKIP_BACK = 264,\n    SKIP_BACK_SELECT = 265,\n    SKIP_BACK_OK = 266,\n    SKIP_BACK_YES = 268,\n    SKIP_CANCEL = 272,\n    SKIP_CANCEL_SELECT = 273,\n    SKIP_CANCEL_OK = 274,\n    SKIP_CANCEL_YES = 276,\n    CONTINUE = 16384,\n    BACK_CONTINUE = 16392,\n    CANCEL_CONTINUE = 16400,\n    LOADING_SPINNER = 134217728,\n    SELECT_LOADING_SPINNER = 134217729,\n    OK_LOADING_SPINNER = 134217730,\n    YES_LOADING_SPINNER = 134217732,\n    BACK_LOADING_SPINNER = 134217736,\n    BACK_SELECT_LOADING_SPINNER = 134217737,\n    BACK_OK_LOADING_SPINNER = 134217738,\n    BACK_YES_LOADING_SPINNER = 134217740,\n    CANCEL_LOADING_SPINNER = 134217744,\n    CANCEL_SELECT_LOADING_SPINNER = 134217745,\n    CANCEL_OK_LOADING_SPINNER = 134217746,\n    CANCEL_YES_LOADING_SPINNER = 134217748\n}",
    "-- Make the first line using custom text.\nAddTextEntry(\"warning_message_first_line\", \"This is the first line.\")\n\n-- Make the second line using custom text.\nAddTextEntry(\"warning_message_second_line\", \"This is the second line!\")\n\n-- Add an event handler for when the screen is dismissed.\nAddEventHandler(\"optionSelected\", function(selected)\n    -- players can either press the physicial buttons, or they can click\n    -- the instructional buttons with their mouse and it will trigger\n    -- the event as well.\nend)\n\n\n-- Create a thread to loop this warning message.\nCreateThread(function()\n    while true do\n        Wait(0)\n        -- Display the warning message every tick.\n        SetWarningMessage(\"warning_message_first_line\", 82, \"warning_message_second_line\", 0, -1, true, 0, 0, 0)\n        \n        -- Check for key presses or instructional button clicks.\n        -- Input group of 2 is required for this to work while the warning is being displayed.\n        \n        if (IsControlJustReleased(2, 201) or IsControlJustReleased(2, 217)) then -- any select/confirm key was pressed.\n            TriggerEvent(\"optionSelected\", \"select\")\n            break\n        elseif (IsControlJustReleased(2, 203)) then -- spacebar/x on controller (alt option) was pressed.\n            TriggerEvent(\"optionSelected\", \"alt\")\n            break\n        elseif (IsControlJustReleased(2, 202)) then -- any of the cancel/back buttons was pressed\n            TriggerEvent(\"optionSelected\", \"cancel\")\n            break\n        end\n    end\nend)"
  ],
  "urls": [
    "https://docs.fivem.net/docs/",
    "https://docs.fivem.net/natives/",
    "https://github.com/citizenfx/natives/edit/master/HUD/SetWarningMessage.md",
    "https://i.imgur.com/imwoimm.png",
    "https://www.rockstargames.com/privacy",
    "https://www.rockstargames.com/cookies"
  ],
  "tags": [
    "client"
  ]
}