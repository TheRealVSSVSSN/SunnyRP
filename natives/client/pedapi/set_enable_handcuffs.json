{
  "title": "SET_ENABLE_HANDCUFFS",
  "breadcrumbs": [
    "Native Reference",
    "PEDAPI",
    "SET_ENABLE_HANDCUFFS"
  ],
  "content": "0xDF1AF8B5D56542FA0xAC9BBA23// SetEnableHandcuffs\nvoid SET_ENABLE_HANDCUFFS(Ped ped, BOOL toggle);Parameters:ped: The ped to toggle handcuffs ontoggle: true to enable handcuffs, false to disableSets the IsHandCuffed (120) config flag on the ped. This blocks the ped from switching weapons (with the exception of switching to weapon_unarmed), makes the ped ragdoll on getting punched and forces a different get-up animation after ragdolling. The ped can also not vault over or climb on top of objects.Used in combination with SET_ENABLE_BOUND_ANKLES in decompiled scripts.Examples:Lualocal playerId = PlayerId()\nlocal isHandcuffed = false\n\nlocal function whileCuffed()\n    while isHandcuffed do\n        local playerPed = PlayerPedId()\n        -- The ragdoll and getting up checks prevents race-conditions when the game syncs the animation to other players\n        if not (IsPedRagdoll(playerPed) or IsPedGettingUp(playerPed)) and not IsEntityPlayingAnim(playerPed, 'mp_arresting', 'idle', 3) then\n            TaskPlayAnim(playerPed, 'mp_arresting', 'idle', 8.0, -8, -1, 49, 0.0, false, false, false)\n        end\n\n        -- Prevents the player from punching / firing weapons\n        DisablePlayerFiring(playerId, true)\n        DisableControlAction(0, 140, true) -- INPUT_MELEE_ATTACK_LIGHT\n\n        Wait(0)\n    end\nend\n\nlocal function setPlayerInHandcuffs(state)\n    local playerPed = PlayerPedId()\n    SetEnableHandcuffs(playerPed, state)\n    isHandcuffed = state\n\n    if state then\n        -- Request the handcuff animations (and don't proceed until it has loaded)\n        RequestAnimDict('mp_arresting')\n        while not HasAnimDictLoaded('mp_arresting') do Wait(0) end\n\n        -- Disarms the player and calls the whileCuffed function inside a thread\n        SetCurrentPedWeapon(playerPed, `WEAPON_UNARMED`, true)\n        CreateThread(whileCuffed)\n    else\n        -- Unloads and stops the handcuff animation\n        RemoveAnimDict('mp_arresting')\n        StopAnimTask(playerPed, 'mp_arresting', 'idle', 2.0)\n    end\nend\n\nsetPlayerInHandcuffs(true)",
  "codeBlocks": [
    "// SetEnableHandcuffs\nvoid SET_ENABLE_HANDCUFFS(Ped ped, BOOL toggle);",
    "local playerId = PlayerId()\nlocal isHandcuffed = false\n\nlocal function whileCuffed()\n    while isHandcuffed do\n        local playerPed = PlayerPedId()\n        -- The ragdoll and getting up checks prevents race-conditions when the game syncs the animation to other players\n        if not (IsPedRagdoll(playerPed) or IsPedGettingUp(playerPed)) and not IsEntityPlayingAnim(playerPed, 'mp_arresting', 'idle', 3) then\n            TaskPlayAnim(playerPed, 'mp_arresting', 'idle', 8.0, -8, -1, 49, 0.0, false, false, false)\n        end\n\n        -- Prevents the player from punching / firing weapons\n        DisablePlayerFiring(playerId, true)\n        DisableControlAction(0, 140, true) -- INPUT_MELEE_ATTACK_LIGHT\n\n        Wait(0)\n    end\nend\n\nlocal function setPlayerInHandcuffs(state)\n    local playerPed = PlayerPedId()\n    SetEnableHandcuffs(playerPed, state)\n    isHandcuffed = state\n\n    if state then\n        -- Request the handcuff animations (and don't proceed until it has loaded)\n        RequestAnimDict('mp_arresting')\n        while not HasAnimDictLoaded('mp_arresting') do Wait(0) end\n\n        -- Disarms the player and calls the whileCuffed function inside a thread\n        SetCurrentPedWeapon(playerPed, `WEAPON_UNARMED`, true)\n        CreateThread(whileCuffed)\n    else\n        -- Unloads and stops the handcuff animation\n        RemoveAnimDict('mp_arresting')\n        StopAnimTask(playerPed, 'mp_arresting', 'idle', 2.0)\n    end\nend\n\nsetPlayerInHandcuffs(true)"
  ],
  "urls": [
    "https://docs.fivem.net/docs/",
    "https://docs.fivem.net/natives/",
    "https://github.com/citizenfx/natives/edit/master/PED/SetEnableHandcuffs.md",
    "https://docs.fivem.net/natives/?_0xC52E0F855C58FC2E",
    "https://www.rockstargames.com/privacy",
    "https://www.rockstargames.com/cookies"
  ],
  "tags": [
    "client"
  ]
}