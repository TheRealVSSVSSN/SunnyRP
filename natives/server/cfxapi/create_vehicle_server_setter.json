{
  "title": "CREATE_VEHICLE_SERVER_SETTER",
  "breadcrumbs": [
    "Native Reference",
    "CFXAPI",
    "CREATE_VEHICLE_SERVER_SETTER"
  ],
  "content": "0x6AE51D4B// CreateVehicleServerSetter\nVehicle CREATE_VEHICLE_SERVER_SETTER(Hash modelHash, char* type, float x, float y, float z, float heading);Parameters:modelHash: The model of vehicle to spawn.type: The appropriate vehicle type for the model info. Can be one of automobile, bike, boat, heli, plane, submarine, trailer, and (potentially), train. This should be the same type as the type field in vehicles.meta.x: Spawn coordinate X component.y: Spawn coordinate Y component.z: Spawn coordinate Z component.heading: Heading to face towards, in degrees.Returns: A script handle for the vehicle, or 0 if the vehicle failed to be created.Equivalent to CREATE_VEHICLE, but it uses 'server setter' logic (like the former CREATE_AUTOMOBILE) as a workaround for\nreliability concerns regarding entity creation RPC.Unlike CREATE_AUTOMOBILE, this supports other vehicle types as well.Examples:Lualocal heli = CreateVehicleServerSetter(`seasparrow`, 'heli', GetEntityCoords(GetPlayerPed(GetPlayers()[1])) + vector3(0, 0, 15), 0.0)\nprint(GetEntityCoords(heli)) -- should return correct coordinates",
  "codeBlocks": [
    "// CreateVehicleServerSetter\nVehicle CREATE_VEHICLE_SERVER_SETTER(Hash modelHash, char* type, float x, float y, float z, float heading);",
    "local heli = CreateVehicleServerSetter(`seasparrow`, 'heli', GetEntityCoords(GetPlayerPed(GetPlayers()[1])) + vector3(0, 0, 15), 0.0)\nprint(GetEntityCoords(heli)) -- should return correct coordinates"
  ],
  "urls": [
    "https://docs.fivem.net/docs/",
    "https://docs.fivem.net/natives/",
    "https://github.com/citizenfx/fivem/edit/master/ext/native-decls/CreateVehicleServerSetter.md",
    "https://www.rockstargames.com/privacy",
    "https://www.rockstargames.com/cookies"
  ]
}