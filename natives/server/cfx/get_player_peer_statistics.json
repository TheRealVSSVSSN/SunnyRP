{
  "title": "GET_PLAYER_PEER_STATISTICS",
  "breadcrumbs": [
    "Native Reference",
    "CFXAPI",
    "GET_PLAYER_PEER_STATISTICS"
  ],
  "content": "0x9A928294// GetPlayerPeerStatistics\nint GET_PLAYER_PEER_STATISTICS(char* playerSrc, int peerStatistic);Parameters:playerSrc: The player to get the stats ofpeerStatistic: The statistic to get, this will error if its out of rangeReturns: See ENetStatisticType for what this will return.const int ENET_PACKET_LOSS_SCALE = 65536;\n\nenum PeerStatistics\n{\n\t// PacketLoss will only update once every 10 seconds, use PacketLossEpoch if you want the time\n\t// since the last time the packet loss was updated.\n\n\t// the amount of packet loss the player has, needs to be scaled with PACKET_LOSS_SCALE\n\tPacketLoss = 0,\n\t// The variance in the packet loss\n\tPacketLossVariance = 1,\n\t// The time since the last packet update in ms, relative to the peers connection time\n\tPacketLossEpoch = 2,\n\t// The mean amount of time it takes for a packet to get to the client (ping)\n\tRoundTripTime = 3,\n\t// The variance in the round trip time\n\tRoundTripTimeVariance = 4,\n\t// Despite their name, these are only updated once every 5 seconds, you can get the last time this was updated with PacketThrottleEpoch\n\t// The last recorded round trip time of a packet\n\tLastRoundTripTime = 5,\n\t// The last round trip time variance\n\tLastRoundTripTimeVariance = 6,\n\t// The time since the last packet throttle update, relative to the peers connection time\n\tPacketThrottleEpoch = 7,\n};\nThese statistics only update once every 10 seconds.Examples:JavaScript\nsetInterval(() => {\n\tconst ENET_PACKET_LOSS_SCALE = 65536;\n\n\tconst PLAYER_SERVER_ID = 1;\n\n\tconst packetLoss = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 0 /* PacketLoss */);\n\tconst packetLossVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 1 /* PacketLossVariance */);\n\tconst packetLossEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 2 /* PacketLossEpoch */)\n\tconst rtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 3 /* RoundTripTime */);\n\tconst rttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 4 /* RoundTripTimeVariance */);\n\tconst lastRtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 5 /* LastRoundTripTime */);\n\tconst lastRttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 6 /* LastRoundTripTimeVariance */);\n\tconst packetThrottleEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 7 /* PacketThrottleEpoch */);\n\n\tconsole.log(`packetLoss: ${packetLoss}`);\n\tconsole.log(`packetLossVariance: ${packetLossVariance}`);\n\tconsole.log(`packetLossEpch: ${packetLossEpoch}`);\n\n\tconsole.log(`packetLossScaled: ${packetLoss / ENET_PACKET_LOSS_SCALE}`);\n\tconsole.log(`packetLossVarianceScaled: ${packetLossVariance / ENET_PACKET_LOSS_SCALE}`);\n\n\tconsole.log(`rtt: ${rtt}`);\n\tconsole.log(`rttVariance: ${rttVariance}`);\n\n\tconsole.log(`lastRtt: ${lastRtt}`);\n\tconsole.log(`lastRttVariance: ${lastRttVariance}`);\n\tconsole.log(`packetThrottleEpoch: ${packetThrottleEpoch}`);\n}, 10000)",
  "codeBlocks": [
    "// GetPlayerPeerStatistics\nint GET_PLAYER_PEER_STATISTICS(char* playerSrc, int peerStatistic);",
    "const int ENET_PACKET_LOSS_SCALE = 65536;\n\nenum PeerStatistics\n{\n\t// PacketLoss will only update once every 10 seconds, use PacketLossEpoch if you want the time\n\t// since the last time the packet loss was updated.\n\n\t// the amount of packet loss the player has, needs to be scaled with PACKET_LOSS_SCALE\n\tPacketLoss = 0,\n\t// The variance in the packet loss\n\tPacketLossVariance = 1,\n\t// The time since the last packet update in ms, relative to the peers connection time\n\tPacketLossEpoch = 2,\n\t// The mean amount of time it takes for a packet to get to the client (ping)\n\tRoundTripTime = 3,\n\t// The variance in the round trip time\n\tRoundTripTimeVariance = 4,\n\t// Despite their name, these are only updated once every 5 seconds, you can get the last time this was updated with PacketThrottleEpoch\n\t// The last recorded round trip time of a packet\n\tLastRoundTripTime = 5,\n\t// The last round trip time variance\n\tLastRoundTripTimeVariance = 6,\n\t// The time since the last packet throttle update, relative to the peers connection time\n\tPacketThrottleEpoch = 7,\n};",
    "setInterval(() => {\n\tconst ENET_PACKET_LOSS_SCALE = 65536;\n\n\tconst PLAYER_SERVER_ID = 1;\n\n\tconst packetLoss = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 0 /* PacketLoss */);\n\tconst packetLossVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 1 /* PacketLossVariance */);\n\tconst packetLossEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 2 /* PacketLossEpoch */)\n\tconst rtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 3 /* RoundTripTime */);\n\tconst rttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 4 /* RoundTripTimeVariance */);\n\tconst lastRtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 5 /* LastRoundTripTime */);\n\tconst lastRttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 6 /* LastRoundTripTimeVariance */);\n\tconst packetThrottleEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 7 /* PacketThrottleEpoch */);\n\n\n\n\n}, 10000)"
  ],
  "urls": [
    "https://docs.fivem.net/docs/",
    "https://docs.fivem.net/natives/",
    "https://github.com/citizenfx/fivem/edit/master/ext/native-decls/GetPlayerPeerStatistics.md",
    "https://www.rockstargames.com/privacy",
    "https://www.rockstargames.com/cookies"
  ],
  "tags": [
    "server"
  ]
}